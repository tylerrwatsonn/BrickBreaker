namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;

class Block223 {
	depend ca.mcgill.ecse223.block.application.Block223Application;
	depend ca.mcgill.ecse223.block.controller.Block223Controller;
	depend ca.mcgill.ecse223.block.controller.InvalidInputException;
	depend ca.mcgill.ecse223.block.controller.TOPlayableGame;
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   
   public static Game findGame(String aName) {
		Game foundGame = null;
		for (Game game : Block223Application.getBlock223().getGames()) {
			if (game.getName().equals(aName)) {
				foundGame = game;
				break;
			}
		}
		return foundGame;
	}

	public PlayedGame findPlayableGame(int id) throws InvalidInputException {
		List<TOPlayableGame> games = Block223Controller.getPlayableGames();
		PlayedGame found_game = null;
		for(TOPlayableGame game : games) {
			String gamename = game.getName();
			Game game_search = Block223.findGame(gamename);
			if(game_search != null) {
				List<PlayedGame> pgames = game_search.getPlayedGames();
				for(PlayedGame pgame : pgames) {
					if(pgame.getId() == id) {
						found_game = pgame;
					}
				}
			}
		}
		return found_game;
	}
	
}

class User {
   depend ca.mcgill.ecse223.block.application.Block223Application;
   unique username;
   1 -> 1..2 UserRole roles;
  before constructor {
   	if (aUsername == null || aUsername.length() == 0){
   		allRoles[0].delete();
   		throw new RuntimeException("The username must be specified.");
   		
   	}
   }
   
 	public static String findUsername(UserRole user_role) {
		Block223 block223 = Block223Application.getBlock223();
		List<User> users = block223.getUsers();
		String found_username = "";
		for(User user : users) {
			List<UserRole> userRoles = user.getRoles();
			
			for(UserRole userRole : userRoles) {
				if(user_role == userRole) {
					found_username = user.getUsername();
				}
			}
		}
		return found_username;
	}
  
}

class UserRole {
   abstract;
   password;
   before constructor {
   	if (aPassword == null || aPassword.length() == 0){
   		throw new RuntimeException("The player password needs to be specified.");
   	}
   }
}


class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   
   before constructor, setName {
    if (aName == null || aName.length() == 0) {
	  throw new RuntimeException("The name of a game must be specified.");
	}
	if (Block223.findGame(aName) != null) {
	  throw new RuntimeException("The name of a game must be unique.");
	}
	
  }
   //Integer aNrBlocksPerLevel;//
   
   
   before constructor, setNrBlocksPerLevel {
   	if (!(aNrBlocksPerLevel > 0)) {
   	  throw new RuntimeException("The number of blocks per level must be greater than zero.");
   	}
  }
   Integer nrBlocksPerLevel;
   
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;

//------------------------Karl------------------------//
public Block findBlock(int id)
 {
List<Block> blocks = this.getBlocks();
	for (Block block : blocks) 
{
		int blockId = block.getId();
		if (id == blockId)
 {
		return block;
		}
	}
	return null;
}
//------------------------Karl------------------------//

}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;

//------------------------Karl------------------------//
   before constructor, setRed {
   if (aRed < MIN_COLOR || aRed > MAX_COLOR){
   throw new RuntimeException("Red must be between 0 and 255.");
   }
   }
   before constructor, setGreen {
   if (aGreen < MIN_COLOR || aGreen > MAX_COLOR){
   throw new RuntimeException("Green must be between 0 and 255.");
   }
   }
   before constructor, setBlue {
   if (aBlue < MIN_COLOR || aBlue > MAX_COLOR){
   throw new RuntimeException("Blue must be between 0 and 255.");
   }
   }
   before constructor, setPoints {
   if (aPoints < MIN_POINTS || aPoints > MAX_POINTS){
   throw new RuntimeException("Points must be between 1 and 1000.");
   }
   }
//------------------------Karl------------------------//

}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
  public BlockAssignment findBlockAssignment(int gridHorizontalPosition, int gridVerticalPosition) 
  {
	  List<BlockAssignment> assignments = getBlockAssignments();
	  for(BlockAssignment assignment : assignments) 
	  {
		  int h = assignment.getGridHorizontalPosition();
		  int v = assignment.getGridVerticalPosition();
		  if(h == gridHorizontalPosition && v == gridVerticalPosition) 
		  {
			  return assignment;
		  }
	  }
	  return null;
  }
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
   Integer maxNumberOfHorizontalBlocks = 15;
   Integer maxNumberOfVerticalBlocks = 15;
   before constructor, setGridHorizontalPosition {
   	if( aGridHorizontalPosition < 1 || aGridHorizontalPosition > 15 ){
   		throw new RuntimeException("The horizontal position must be between 1 and " + this.getMaxNumberOfHorizontalBlocks() + ".");
   	}
   }
   before constructor, setGridVerticalPosition {
   	if( aGridVerticalPosition < 1 || aGridVerticalPosition > 15 ){
   		throw new RuntimeException("The vertical position must be between 1 and " + this.getMaxNumberOfVerticalBlocks() + ".");
   	}
   }

}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
  before constructor, setMinBallSpeedX {
    if (aMinBallSpeedX < 0) {
   	  throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   	}
   }
   before constructor, setMinBallSpeedY {
   	if (aMinBallSpeedY < 0) {
   	  throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   	}
   }
   before constructor, setBallSpeedIncreaseFactor {
   	if (!(aBallSpeedIncreaseFactor > 0)) {
   	  throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
   	}
   }

}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;

   const PLAY_AREA_WIDTH = 390;
   before constructor, setMaxPaddleLength {
    if (!(aMaxPaddleLength > 0) || aMaxPaddleLength > PLAY_AREA_WIDTH) {
      throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
    }
   }
   before constructor, setMinPaddleLength {
    if (!(aMinPaddleLength > 0)) {
      throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
    }
   }

}


